Broad_sense(Var.model.1_Amb) # Flowering date
Broad_sense(Var.model.2_Amb) # Banner width
Broad_sense(Var.model.3_Amb) # Banner length
Broad_sense(Var.model.4_Amb) # Number of inflorescences
Broad_sense(Var.model.5_Amb) # Biomass
Broad_sense(Var.model.6_Amb) # Number of flowers
Broad_sense(Var.model.7_Amb) # Seed mass
model.1.full_Red <- lmer(Flower.date ~ (1|Block) + (1|Genotype), data = datExp_Red, REML = T)
model.2.full_Red <- lmer(Avg.Bnr.Wdth ~ (1|Block) + (1|Genotype), data = datExp_Red, REML = T)
model.3.full_Red <- lmer(Avg.Bnr.Ht ~ (1|Block) + (1|Genotype), data = datExp_Red, REML = T)
model.4.full_Red <- lmer(Total.Inf ~ (1|Block) + (1|Genotype), data = datExp_Red, REML = T)
model.5.full_Red <- lmer(Biomass.plant ~ (1|Block) + (1|Genotype), data = datExp_Red, REML = T)
model.6.full_Red <- lmer(Num.flwrs ~ (1|Block) + (1|Genotype), data = datExp_Red, REML = T)
model.7.full_Red <- lmer(Total.Seed.mass ~ (1|Block) + (1|Genotype), data = datExp_Red, REML = T)
rand(model.1.full_Red) # Flower date
rand(model.2.full_Red) # Banner width
rand(model.3.full_Red) # Banner height
rand(model.4.full_Red) # Total inflorescences
rand(model.5.full_Red) # Vegetative biomass
rand(model.6.full_Red) # Number of flowers
rand(model.7.full_Red) # Total seed mass
Var.model.1_Red <- as.data.frame(VarCorr(model.1.full_Red),comp="Variance")
Var.model.2_Red <- as.data.frame(VarCorr(model.2.full_Red),comp="Variance")
Var.model.3_Red <- as.data.frame(VarCorr(model.3.full_Red),comp="Variance")
Var.model.4_Red <- as.data.frame(VarCorr(model.4.full_Red),comp="Variance")
Var.model.5_Red <- as.data.frame(VarCorr(model.5.full_Red),comp="Variance")
Var.model.6_Red <- as.data.frame(VarCorr(model.6.full_Red),comp="Variance")
Var.model.7_Red <- as.data.frame(VarCorr(model.7.full_Red),comp="Variance")
Broad_sense(Var.model.1_Red) # Flowering date
Broad_sense(Var.model.2_Red) # Banner width
Broad_sense(Var.model.3_Red) # Banner length
Broad_sense(Var.model.4_Red) # Number of inflorescences
Broad_sense(Var.model.5_Red) # Biomass
Broad_sense(Var.model.6_Red) # Number of flowers
Broad_sense(Var.model.7_Red) # Seed mass
#x is a variance dataframe and y is trait mean
CVg <- function(x,y) {
100 * (sqrt(x$vcov[1])/y)
}
mean.1_Amb <- mean(datExp_Amb$Flower.date, na.rm = T)
mean.2_Amb <- mean(datExp_Amb$Avg.Bnr.Wdth, na.rm = T)
mean.3_Amb <- mean(datExp_Amb$Avg.Bnr.Ht, na.rm = T)
mean.4_Amb <- mean(datExp_Amb$Total.Inf, na.rm = T)
mean.5_Amb <- mean(datExp_Amb$Biomass.plant, na.rm = T)
mean.6_Amb <- mean(datExp_Amb$Num.flwrs, na.rm = T)
mean.7_Amb <- mean(datExp_Amb$Total.Seed.mass, na.rm = T)
CVg(Var.model.1_Amb,mean.1) # Flowering date
CVg(Var.model.2_Amb,mean.2) # Banner width
CVg(Var.model.1_Amb,mean.1_Amb) # Flowering date
CVg(Var.model.2_Amb,mean.2_Amb) # Banner width
CVg(Var.model.3_Amb,mean.3_Amb) # Banner height
CVg(Var.model.4_Amb,mean.4_Amb) # Number of inflorescences
CVg(Var.model.5_Amb,mean.5_Amb) # Biomass
CVg(Var.model.6_Amb,mean.6_Amb) # Number of flowers
CVg(Var.model.7_Amb,mean.7_Amb) # Seed mass
mean.1_Red <- mean(datExp_Red$Flower.date, na.rm = T)
mean.2_Red <- mean(datExp_Red$Avg.Bnr.Wdth, na.rm = T)
mean.3_Red <- mean(datExp_Red$Avg.Bnr.Ht, na.rm = T)
mean.4_Red <- mean(datExp_Red$Total.Inf, na.rm = T)
mean.5_Red <- mean(datExp_Red$Biomass.plant, na.rm = T)
mean.6_Red <- mean(datExp_Red$Num.flwrs, na.rm = T)
mean.7_Red <- mean(datExp_Red$Total.Seed.mass, na.rm = T)
CVg(Var.model.1_Red,mean.1_Red) # Flowering date
CVg(Var.model.2_Red,mean.2_Red) # Banner width
CVg(Var.model.3_Red,mean.3_Red) # Banner height
CVg(Var.model.4_Red,mean.4_Red) # Number of inflorescences
CVg(Var.model.5_Red,mean.5_Red) # Biomass
CVg(Var.model.6_Red,mean.6_Red) # Number of flowers
CVg(Var.model.7_Red,mean.7_Red) # Seed mass
library(plyr)
#Summarise trait data by plant genotype. Remove NA's for each trait
datExp.Gen <- ddply(datExp,.(Genotype,HCN,Herbivory,Pollination, Glycosides.Ac, Linamarase.Li),summarise,
Flwr.date = mean(Flower.date,na.rm = T),
Bnr.wdth=mean(Avg.Bnr.Wdth,na.rm = T),
Bnr.ht = mean(Avg.Bnr.Ht,na.rm = T),
Biomass = mean (Biomass.plant,na.rm = T),
Infl = mean (Total.Inf,na.rm = T),
Flwrs = mean(Num.flwrs,na.rm = T),
AF.Seeds = mean(Total.Seed.mass, na.rm = T))
View(datExp.Gen)
View(datExp.Gen)
count(unique(datExp.Gen$Genotype))
count(unique(na.omit(datExp.Gen$Genotype)))
View(GTSelnData.all)
View(datExp.Gen)
GTSelnData.all.Voles <- read.table(file.choose(), header = T)
GTSelnData.all.Voles$InflFitnessResid <- resid(lmer(RF.Seed ~ Mammal.herb + HCN + Bnr.wdth.S +
Flwrs.S + Mammal.herb:HCN + HCN:Bnr.wdth.S +
Mammal.herb:Bnr.wdth.S +
Mammal.herb:Flwrs.S + Mammal.herb:HCN:Bnr.wdth.S +
(1 | Genotype), data = GTSelnData.all.Voles))
#Number of inflorescences residuals
GTSelnData.all.Voles$InflResid <- resid(lmer(Infl.S ~ Mammal.herb + HCN + Bnr.wdth.S +
Flwrs.S + Mammal.herb:HCN + HCN:Bnr.wdth.S +
Mammal.herb:Bnr.wdth.S +
Mammal.herb:Flwrs.S + Mammal.herb:HCN:Bnr.wdth.S +
(1 | Genotype), data = GTSelnData.all.Voles))
GTSelnData.all.Voles[order(GTSelnData.all.Voles$InflFitnessResid,decreasing=T)[1:5],]
PlotInfl.x.Voles <- ggplot(GTSelnData.all.Voles, aes(x = InflResid, y = InflFitnessResid, group = factor(Mammal.herb))) +
labs(x = "Number of inflorescences (residual)", y = "Relative fitness (residual)") +
geom_point(aes(shape = factor(Mammal.herb), fill = factor(Mammal.herb))) +
scale_shape_manual(labels = c("No vole damage","Vole damage"), values=c(21, 25)) +
scale_fill_manual(labels = c("No vole damage","Vole damage"), values=c("white", "black")) +
geom_smooth(method = "lm", se = F, colour = "black", size = 1.05, fullrange = T, aes(linetype = factor(Mammal.herb)))  +
scale_linetype_manual(labels = c("No vole damage","Vole damage"), values=c(1, 2)) +
coord_cartesian(ylim = c(-1.5, 2.0)) + scale_y_continuous(breaks = seq(from = -2, to = 3.0, by = 0.5))
PlotInfl.x.Voles +  ng1 + theme(legend.title = element_blank())
library(ggplot2)
GTSelnData.all.Voles[order(GTSelnData.all.Voles$InflFitnessResid,decreasing=T)[1:5],]
PlotInfl.x.Voles <- ggplot(GTSelnData.all.Voles, aes(x = InflResid, y = InflFitnessResid, group = factor(Mammal.herb))) +
labs(x = "Number of inflorescences (residual)", y = "Relative fitness (residual)") +
geom_point(aes(shape = factor(Mammal.herb), fill = factor(Mammal.herb))) +
scale_shape_manual(labels = c("No vole damage","Vole damage"), values=c(21, 25)) +
scale_fill_manual(labels = c("No vole damage","Vole damage"), values=c("white", "black")) +
geom_smooth(method = "lm", se = F, colour = "black", size = 1.05, fullrange = T, aes(linetype = factor(Mammal.herb)))  +
scale_linetype_manual(labels = c("No vole damage","Vole damage"), values=c(1, 2)) +
coord_cartesian(ylim = c(-1.5, 2.0)) + scale_y_continuous(breaks = seq(from = -2, to = 3.0, by = 0.5))
PlotInfl.x.Voles +  ng1 + theme(legend.title = element_blank())
ng1=theme(aspect.ratio=0.7,panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border=element_blank(),
axis.line.x = element_line(color="black",size=1),
axis.line.y = element_line(color="black",size=1),
axis.ticks=element_line(color="black"),
axis.text=element_text(color="black",size=15),
axis.title=element_text(color="black",size=1),
axis.title.y=element_text(vjust=2,size=17),
axis.title.x=element_text(vjust=0.1,size=17),
axis.text.x=element_text(size=15),
axis.text.y=element_text(size=15),
strip.text.x = element_text(size = 10, colour = "black",face = "bold"),
strip.background = element_rect(colour="black"),
legend.position = "top", legend.direction="vertical",
legend.text=element_text(size=17), legend.key = element_rect(fill = "white"),
legend.title = element_text(size=17),legend.key.size = unit(1.0, "cm"))
PlotInfl.x.Voles <- ggplot(GTSelnData.all.Voles, aes(x = InflResid, y = InflFitnessResid, group = factor(Mammal.herb))) +
labs(x = "Number of inflorescences (residual)", y = "Relative fitness (residual)") +
geom_point(aes(shape = factor(Mammal.herb), fill = factor(Mammal.herb))) +
scale_shape_manual(labels = c("No vole damage","Vole damage"), values=c(21, 25)) +
scale_fill_manual(labels = c("No vole damage","Vole damage"), values=c("white", "black")) +
geom_smooth(method = "lm", se = F, colour = "black", size = 1.05, fullrange = T, aes(linetype = factor(Mammal.herb)))  +
scale_linetype_manual(labels = c("No vole damage","Vole damage"), values=c(1, 2)) +
coord_cartesian(ylim = c(-1.5, 2.0)) + scale_y_continuous(breaks = seq(from = -2, to = 3.0, by = 0.5))
PlotInfl.x.Voles +  ng1 + theme(legend.title = element_blank())
scaleFUN <- function(x) sprintf("%.2f", x)
HerbMedSel$Defense <- factor(HerbMedSel$Defense, levels=c("Undefended", "Defended"))
HerbMedSel_Flwr.size <- subset(HerbMedSel, Trait == "Bnr.ht.S" | Trait == "Bnr.wdth.S")
plotHerb.Med.Sel <- ggplot(HerbMedSel, aes(x = Defense, y = Gradient, group = Trait))+
geom_point(size = 3, aes(shape = Trait), position = position_dodge(width = 0.3), alpha = 0.4)+
xlab("")+ylab("Strength of herbivore-mediated selection") +
geom_hline(aes(yintercept = 0), color = "black", linetype = "dashed") +
stat_summary(fun.y = mean,
fun.ymin = function(x) mean(x) - (1.96*(sd(x)/sqrt(length(x)))),
fun.ymax = function(x) mean(x) + (1.96*(sd(x)/sqrt(length(x)))),
geom = "errorbar", width = 0.15, color = "black", aes(group = Defense)) +
stat_summary(fun.y = mean, geom = "point", size = 2, color = "black", aes(group = Defense))
plotHerb.Med.Sel + ng1 + theme(legend.title=element_blank())
GTSelnData.all.HerbAmb <- subset(GTSelnData.all, Herbivory == "Ambient")
Global.model_GTSeln.HerbAmb <- lmer(RF.Seed ~ Flwr.date.S + Bnr.ht.S + Bnr.wdth.S +
Biomass.S + Infl.S + Flwrs.S +
(1|Genotype),
data = GTSelnData.all.HerbAmb)
Coeffs.HerbAmb <- as.data.frame(coef(summary(Global.model_GTSeln.HerbAmb))[ , "Estimate"])
names(Coeffs.HerbAmb)[names(Coeffs.HerbAmb) == "coef(summary(Global.model_GTSeln.HerbAmb))[, \"Estimate\"]"] <- "Gradient.HerbAmb"
Coeffs.HerbAmb$Trait <- rownames(Coeffs.HerbAmb)
## REDUCED HERBIVORY ##
GTSelnData.all.HerbRed <- subset(GTSelnData.all, Herbivory == "Reduced")
Global.model_GTSeln.HerbRed <- lmer(RF.Seed ~ Flwr.date.S + Bnr.ht.S + Bnr.wdth.S +
Biomass.S + Infl.S + Flwrs.S +
(1|Genotype),
data = GTSelnData.all.HerbRed)
Coeffs.HerbRed <- as.data.frame(coef(summary(Global.model_GTSeln.HerbRed))[ , "Estimate"])
names(Coeffs.HerbRed)[names(Coeffs.HerbRed) == "coef(summary(Global.model_GTSeln.HerbRed))[, \"Estimate\"]"] <- "Gradient.HerbRed"
Coeffs.HerbRed$Trait <- rownames(Coeffs.HerbRed)
## OPEN POLLINATION ##
GTSelnData.all.PollOp <- subset(GTSelnData.all, Pollination == "Open")
Global.model_GTSeln.PollOp <- lmer(RF.Seed ~ Flwr.date.S + Bnr.ht.S + Bnr.wdth.S +
Biomass.S + Infl.S + Flwrs.S +
(1|Genotype),
data = GTSelnData.all.PollOp)
Coeffs.PollOp <- as.data.frame(coef(summary(Global.model_GTSeln.PollOp))[ , "Estimate"])
names(Coeffs.PollOp)[names(Coeffs.PollOp) == "coef(summary(Global.model_GTSeln.PollOp))[, \"Estimate\"]"] <- "Gradient.PollOp"
Coeffs.PollOp$Trait <- rownames(Coeffs.PollOp)
## SUPPLEMENTAL POLLINATION ##
GTSelnData.all.PollSupp <- subset(GTSelnData.all, Pollination == "Supp")
Global.model_GTSeln.PollSupp <- lmer(RF.Seed ~ Flwr.date.S + Bnr.ht.S + Bnr.wdth.S +
Biomass.S + Infl.S + Flwrs.S +
(1|Genotype),
data = GTSelnData.all.PollSupp)
Coeffs.PollSupp <- as.data.frame(coef(summary(Global.model_GTSeln.PollSupp))[ , "Estimate"])
names(Coeffs.PollSupp)[names(Coeffs.PollSupp) == "coef(summary(Global.model_GTSeln.PollSupp))[, \"Estimate\"]"] <- "Gradient.PollSupp"
Coeffs.PollSupp$Trait <- rownames(Coeffs.PollSupp)
## HCN+ ##
GTSelnData.all.Cyan <- subset(GTSelnData.all, HCN == "Yes")
Global.model_GTSeln.Cyan <- lmer(RF.Seed ~ Flwr.date.S + Bnr.ht.S + Bnr.wdth.S +
Biomass.S + Infl.S + Flwrs.S +
(1|Genotype),
data = GTSelnData.all.Cyan)
Coeffs.Cyan <- as.data.frame(coef(summary(Global.model_GTSeln.Cyan))[ , "Estimate"])
names(Coeffs.Cyan)[names(Coeffs.Cyan) == "coef(summary(Global.model_GTSeln.Cyan))[, \"Estimate\"]"] <- "Gradient.Cyan"
Coeffs.Cyan$Trait <- rownames(Coeffs.Cyan)
## HCN- ##
GTSelnData.all.Acyan <- subset(GTSelnData.all, HCN == "No")
Global.model_GTSeln.Acyan <- lmer(RF.Seed ~ Flwr.date.S + Bnr.ht.S + Bnr.wdth.S +
Biomass.S + Infl.S + Flwrs.S +
(1|Genotype),
data = GTSelnData.all.Acyan)
Coeffs.Acyan <- as.data.frame(coef(summary(Global.model_GTSeln.Acyan))[ , "Estimate"])
names(Coeffs.Acyan)[names(Coeffs.Acyan) == "coef(summary(Global.model_GTSeln.Acyan))[, \"Estimate\"]"] <- "Gradient.Acyan"
Coeffs.Acyan$Trait <- rownames(Coeffs.Acyan)
Sel.Grad <- Reduce(function(...) merge(..., by = "Trait"),
list(Coeffs.HerbAmb, Coeffs.HerbRed, Coeffs.PollOp, Coeffs.PollSupp, Coeffs.Cyan, Coeffs.Acyan))
Sel.Grad <- Sel.Grad[-which(Sel.Grad$Trait == "(Intercept)"),]
Sel.Grad$HerbMedSel <- Sel.Grad$Gradient.HerbAmb - Sel.Grad$Gradient.HerbRed
Sel.Grad$PollMedSel <- Sel.Grad$Gradient.PollOp - Sel.Grad$Gradient.PollSupp
Sel.Grad$DefMedSel <- Sel.Grad$Gradient.Cyan - Sel.Grad$Gradient.Acyan
AgentMedSel <- dplyr::select(Sel.Grad, Trait, HerbMedSel, PollMedSel, DefMedSel)
AgentMedSel <- data.table::melt(AgentMedSel,id.vars = c("Trait"),
variable.name = "Agent",
value.name = "Gradient")
AgentMedSel <- within(AgentMedSel, {
Agent = ifelse(Agent == "HerbMedSel","Herbivore",
ifelse(Agent == "PollMedSel", "Pollinator", "Defense"))
})
scaleFUN <- function(x) sprintf("%.2f", x)
plotAgent.Med.Sel <- ggplot(AgentMedSel, aes(x = Agent, y = Gradient, group = Trait))+
geom_point(size = 3, aes(shape = Trait), position = position_dodge(width = 0.3), alpha = 0.4)+
xlab("Agent")+ylab("Strength of agent-mediated selection") +
geom_hline(aes(yintercept = 0), color = "black", linetype = "dashed") +
stat_summary(fun.y = mean,
fun.ymin = function(x) mean(x) - (1.96*(sd(x)/sqrt(length(x)))),
fun.ymax = function(x) mean(x) + (1.96*(sd(x)/sqrt(length(x)))),
geom = "errorbar", width = 0.15, color = "black", aes(group = Agent)) +
stat_summary(fun.y = mean, geom = "point", size = 2, color = "black", aes(group = Agent)) +
coord_cartesian(ylim = c(-0.3, 0.3)) + scale_y_continuous(breaks = seq(from = -0.3, to = 0.3, by = 0.05), labels = scaleFUN)
plotAgent.Med.Sel + ng1 + theme(legend.title=element_blank())
scaleFUN <- function(x) sprintf("%.2f", x)
plotAgent.Med.Sel <- ggplot(AgentMedSel, aes(x = Agent, y = abs(Gradient), group = Trait))+
geom_point(size = 3, aes(shape = Trait), position = position_dodge(width = 0.3), alpha = 0.4)+
xlab("Agent")+ylab("Strength of agent-mediated selection") +
geom_hline(aes(yintercept = 0), color = "black", linetype = "dashed") +
stat_summary(fun.y = mean,
fun.ymin = function(x) mean(x) - (1.96*(sd(x)/sqrt(length(x)))),
fun.ymax = function(x) mean(x) + (1.96*(sd(x)/sqrt(length(x)))),
geom = "errorbar", width = 0.15, color = "black", aes(group = Agent)) +
stat_summary(fun.y = mean, geom = "point", size = 2, color = "black", aes(group = Agent)) +
coord_cartesian(ylim = c(-0.3, 0.3)) + scale_y_continuous(breaks = seq(from = -0.3, to = 0.3, by = 0.05), labels = scaleFUN)
plotAgent.Med.Sel + ng1 + theme(legend.title=element_blank())
citation("lmerTest")
citation()
library(plotly)
library(reshape2)
dat <- read.csv('Allele_Freq_HCN.csv', header = T)
setwd('/Users/jamessantangelo/Documents/Academia/Doctorate_PhD/Projects/SEC_Simulating.evolutionary.clines/SEC_Visuals/HCN-x-Alleles plot')
dat <- read.csv('Allele_Freq_HCN.csv', header = T)
Cyan <- acast(dat, dat$pA ~ dat$pB, value.var="Cyan")
?plot_ly
?add_surface
p <- plot_ly(x = dat$pB, y = dat$pB, z = ~Cyan, colors=c("#EBEBEB","#0A0A0A")) %>%
add_surface() %>%
layout(
scene = list(
xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")
))
p
p %>% add_mesh()
p %>% add_lines()
p <- plot_ly(x = dat$pB, y = dat$pB, z = ~Cyan, colors=c("#EBEBEB","#0A0A0A")) %>%
add_surface() %>%
add_mesh() %>%
layout(
scene = list(
xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")
))
p
p <- plot_ly(x = dat$pB, y = dat$pB, z = ~Cyan, colors=c("#EBEBEB","#0A0A0A")) %>%
add_surface() %>%
add_contour() %>%
layout(
scene = list(
xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")
))
p
p <- plot_ly(x = dat$pB, y = dat$pB, z = ~Cyan, colors=c("#EBEBEB","#0A0A0A")) %>%
add_contour() %>%
layout(
scene = list(
xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")
))
p
p <- plot_ly(x = dat$pB, y = dat$pB, z = ~Cyan, colors=c("#EBEBEB","#0A0A0A")) %>%
add_mesh() %>%
layout(
scene = list(
xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")
))
p
p <- plot_ly(x = dat$pB, y = dat$pB, z = ~Cyan, colors=c("#EBEBEB","#0A0A0A")) %>%
add_surface() %>%
layout(
scene = list(
xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")
))
p
p <- plot_ly(x = dat$pB, y = dat$pB, z = ~Cyan, colors=c("#EBEBEB","#0A0A0A")) %>%
add_markers() %>%
layout(
scene = list(
xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")
))
p
p <- plot_ly(x = dat$pB, y = dat$pB, z = ~Cyan, colors=c("#EBEBEB","#0A0A0A")) %>%
add_markers() %>%
add_surface() %>%
layout(
scene = list(
xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")
))
p
p <- plot_ly(x = dat$pB, y = dat$pB, z = ~Cyan, colors=c("#EBEBEB","#0A0A0A")) %>%
add_contour() %>%
layout(
scene = list(
xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")
))
p
p <- plot_ly(x = dat$pB, y = dat$pB, z = ~Cyan, colors=c("#EBEBEB","#0A0A0A")) %>%
add_lines() %>%
layout(
scene = list(
xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")
))
p
View(Cyan)
p <- plot_ly(x = dat$pB, y = dat$pB, z = ~Cyan, colors=c("#EBEBEB","#0A0A0A"),
type = 'scatter3d', mode = 'lines') %>%
# add_lines() %>%
layout(
scene = list(
xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")
))
p
p <- plot_ly(x = dat$pA, y = dat$pB, z = ~Cyan, colors=c("#EBEBEB","#0A0A0A")) %>%
add_lines() %>%
layout(
scene = list(
xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")
))
p
p <- plot_ly(x = dat$pA, y = dat$pB, z = ~Cyan, colors=c("#EBEBEB","#0A0A0A")) %>%
add_surface() %>%
layout(
scene = list(
xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")
))
p
p <- plot_ly(x = ~dat$pA, y = dat$pB, z = ~Cyan, colors=c("#EBEBEB","#0A0A0A")) %>%
add_surface() %>%
layout(
scene = list(
xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")
))
p
p <- plot_ly(x = dat$pB, y = dat$pB, z = ~Cyan, colors=c("#EBEBEB","#0A0A0A")) %>%
add_surface() %>%
layout(
scene = list(
xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")
))
p
setwd('/Users/jamessantangelo/Documents/Academia/Doctorate_PhD/Projects/SEC_Simulating.evolutionary.clines/SEC_Visuals/HCN-x-Alleles plot')
dat <- read.csv('Allele_Freq_HCN.csv', header = T)
Cyan <- acast(dat, dat$pA ~ dat$pB, value.var="Cyan")
p <- plot_ly(x = dat$pB, y = dat$pB, z = ~Cyan, colors=c("#EBEBEB","#0A0A0A")) %>%
add_surface() %>%
layout(
scene = list(
xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")
))
p
p <- plot_ly(x = dat$pB, y = dat$pB, z = ~Cyan, colors=c("#EBEBEB","#0A0A0A")) %>%
add_contour() %>%
layout(
scene = list(
xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")
))
p
?add_contour()
p <- plot_ly(x = dat$pB, y = dat$pB, z = ~Cyan, colors=c("#EBEBEB","#0A0A0A")) %>%
add_contour() %>%
add_mesh() %>%
layout(
scene = list(
xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")
))
p
p <- plot_ly(x = dat$pB, y = dat$pB, z = ~Cyan, colors=c("#EBEBEB","#0A0A0A")) %>%
add_contour() %>%
layout(
scene = list(
xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")
))
p
dat2 <- read.csv('Allele_Freq_Other.csv', header = T)
Other <- acast(dat2, dat$pA ~ dat$pB, value.var="Other")
dat2 <- read.csv('Allele_Freq_Other.csv', header = T)
Other <- acast(dat2, dat$pA ~ dat$pB, value.var="Other")
p2 <- plot_ly(x = dat2$pB, y = dat2$pB, z = ~Other, colors=c("#EBEBEB","#0A0A0A")) %>%
add_contour() %>%
layout(
scene = list(
xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")
))
p2
p <- plot_ly(x = dat$pB, y = dat$pB, z = ~Cyan, colors=c("#EBEBEB","#0A0A0A")) %>%
add_contour() %>%
layout(
scene = list(
xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")
))
p
p <- plot_ly(x = dat$pB, y = dat$pB, z = ~Cyan, colors=c("#EBEBEB","#0A0A0A")) %>%
add_contour(start = 0, end = 1.0) %>%
layout(
scene = list(
xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")
))
p
p <- plot_ly(x = dat$pB, y = dat$pB, z = ~Cyan, colors=c("#EBEBEB","#0A0A0A")) %>%
add_contour(contours = list(
end = 26,
size = 2,
start = 2
)) %>%
layout(
scene = list(
xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")
))
p
p <- plot_ly(x = dat$pB, y = dat$pB, z = ~Cyan, colors=c("#EBEBEB","#0A0A0A")) %>%
add_contour(contours = list(
end = 1.0,
size = 0.5,
start = 0
)) %>%
layout(
scene = list(
xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")
))
p
p <- plot_ly(x = dat$pB, y = dat$pB, z = ~Cyan, colors=c("#EBEBEB","#0A0A0A")) %>%
add_contour(contours = list(
end = 1.0,
size = 0.05,
start = 0
)) %>%
layout(
scene = list(
xaxis = list(title = ""),
yaxis = list(title = ""),
zaxis = list(title = "")
))
p
